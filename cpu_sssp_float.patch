diff --git a/lonestar/analytics/cpu/sssp/SSSP.cpp b/lonestar/analytics/cpu/sssp/SSSP.cpp
index 0d05b2410..d2670f0e3 100644
--- a/lonestar/analytics/cpu/sssp/SSSP.cpp
+++ b/lonestar/analytics/cpu/sssp/SSSP.cpp
@@ -50,10 +50,7 @@ static cll::opt<unsigned int>
     reportNode("reportNode",
                cll::desc("Node to report distance to(default value 1)"),
                cll::init(1));
-static cll::opt<unsigned int>
-    stepShift("delta",
-              cll::desc("Shift value for the deltastep (default value 13)"),
-              cll::init(13));
+static cll::opt<float> delta("delta", cll::desc("value for the deltastep (default value 1)"), cll::init(1.0f));
 
 enum Algo {
   deltaTile = 0,
@@ -88,16 +85,16 @@ static cll::opt<Algo> algo(
     cll::init(AutoAlgo));
 
 //! [withnumaalloc]
-using Graph = galois::graphs::LC_CSR_Graph<std::atomic<uint32_t>, uint32_t>::
-    with_no_lockable<true>::type ::with_numa_alloc<true>::type;
+using Graph = galois::graphs::LC_CSR_Graph<std::atomic<float>, float>::
+with_no_lockable<true>::type ::with_numa_alloc<true>::type;
 //! [withnumaalloc]
 typedef Graph::GraphNode GNode;
 
-constexpr static const bool TRACK_WORK          = false;
+constexpr static const bool TRACK_WORK          = true;
 constexpr static const unsigned CHUNK_SIZE      = 64U;
 constexpr static const ptrdiff_t EDGE_TILE_SIZE = 512;
 
-using SSSP                 = BFS_SSSP<Graph, uint32_t, true, EDGE_TILE_SIZE>;
+using SSSP = BFS_SSSP<Graph, float, true, EDGE_TILE_SIZE>;
 using Dist                 = SSSP::Dist;
 using UpdateRequest        = SSSP::UpdateRequest;
 using UpdateRequestIndexer = SSSP::UpdateRequestIndexer;
@@ -117,12 +114,13 @@ using OBIM_Barrier =
 
 template <typename T, typename OBIMTy = OBIM, typename P, typename R>
 void deltaStepAlgo(Graph& graph, GNode source, const P& pushWrap,
-                   const R& edgeRange) {
+                   const R& edgeRange, long long int& total_work) {
 
   //! [reducible for self-defined stats]
   galois::GAccumulator<size_t> BadWork;
   //! [reducible for self-defined stats]
   galois::GAccumulator<size_t> WLEmptyWork;
+  galois::GAccumulator<size_t> WORK_COUNT;
 
   graph.getData(source) = 0;
 
@@ -140,14 +138,14 @@ void deltaStepAlgo(Graph& graph, GNode source, const P& pushWrap,
             WLEmptyWork += 1;
           return;
         }
-
+        WORK_COUNT+=1;
         for (auto ii : edgeRange(item)) {
 
           GNode dst          = graph.getEdgeDst(ii);
           auto& ddist        = graph.getData(dst, flag);
           Dist ew            = graph.getEdgeData(ii, flag);
           const Dist newDist = sdata + ew;
-          Dist oldDist       = galois::atomicMin<uint32_t>(ddist, newDist);
+          Dist oldDist       = galois::atomicMin<float>(ddist, newDist);
           if (newDist < oldDist) {
             if (TRACK_WORK) {
               //! [per-thread contribution of self-defined stats]
@@ -160,7 +158,7 @@ void deltaStepAlgo(Graph& graph, GNode source, const P& pushWrap,
           }
         }
       },
-      galois::wl<OBIMTy>(UpdateRequestIndexer{stepShift}),
+      galois::wl<OBIMTy>(UpdateRequestIndexer{delta}),
       galois::disable_conflict_detection(), galois::loopname("SSSP"));
 
   if (TRACK_WORK) {
@@ -169,6 +167,9 @@ void deltaStepAlgo(Graph& graph, GNode source, const P& pushWrap,
     //! [report self-defined stats]
     galois::runtime::reportStat_Single("SSSP", "WLEmptyWork",
                                        WLEmptyWork.reduce());
+	//! [report self-defined stats]
+	galois::runtime::reportStat_Single("SSSP", "WORK_COUNT", WORK_COUNT.reduce());
+	total_work = WORK_COUNT.reduce();
   }
 }
 
@@ -176,7 +177,7 @@ template <typename T, typename P, typename R>
 void serDeltaAlgo(Graph& graph, const GNode& source, const P& pushWrap,
                   const R& edgeRange) {
 
-  SerialBucketWL<T, UpdateRequestIndexer> wl(UpdateRequestIndexer{stepShift});
+  SerialBucketWL<T, UpdateRequestIndexer> wl(UpdateRequestIndexer{delta});
   ;
   graph.getData(source) = 0;
 
@@ -222,7 +223,7 @@ void serDeltaAlgo(Graph& graph, const GNode& source, const P& pushWrap,
 
 template <typename T, typename P, typename R>
 void dijkstraAlgo(Graph& graph, const GNode& source, const P& pushWrap,
-                  const R& edgeRange) {
+                  const R& edgeRange, long long int& total_work) {
 
   using WL = galois::MinHeap<T>;
 
@@ -242,7 +243,7 @@ void dijkstraAlgo(Graph& graph, const GNode& source, const P& pushWrap,
       // empty work
       continue;
     }
-
+    total_work++;
     for (auto e : edgeRange(item)) {
 
       GNode dst   = graph.getEdgeDst(e);
@@ -389,7 +390,7 @@ int main(int argc, char** argv) {
 
   if (algo == deltaStep || algo == deltaTile || algo == serDelta ||
       algo == serDeltaTile) {
-    std::cout << "INFO: Using delta-step of " << (1 << stepShift) << "\n";
+    std::cout << "INFO: Using delta-step of " << delta << "\n";
     std::cout
         << "WARNING: Performance varies considerably due to delta parameter.\n";
     std::cout
@@ -402,6 +403,7 @@ int main(int argc, char** argv) {
   graph.getData(source) = 0;
 
   std::cout << "Running " << ALGO_NAMES[algo] << " algorithm\n";
+  long long int total_work = 0;
 
   galois::StatTimer autoAlgoTimer("AutoAlgo_0");
   galois::StatTimer execTime("Timer_0");
@@ -421,11 +423,11 @@ int main(int argc, char** argv) {
   switch (algo) {
   case deltaTile:
     deltaStepAlgo<SrcEdgeTile>(graph, source, SrcEdgeTilePushWrap{graph},
-                               TileRangeFn());
+                               TileRangeFn(), total_work);
     break;
   case deltaStep:
     deltaStepAlgo<UpdateRequest>(graph, source, ReqPushWrap(),
-                                 OutEdgeRangeFn{graph});
+                                 OutEdgeRangeFn{graph}, total_work);
     break;
   case serDeltaTile:
     serDeltaAlgo<SrcEdgeTile>(graph, source, SrcEdgeTilePushWrap{graph},
@@ -437,11 +439,11 @@ int main(int argc, char** argv) {
     break;
   case dijkstraTile:
     dijkstraAlgo<SrcEdgeTile>(graph, source, SrcEdgeTilePushWrap{graph},
-                              TileRangeFn());
+                              TileRangeFn(), total_work);
     break;
   case dijkstra:
     dijkstraAlgo<UpdateRequest>(graph, source, ReqPushWrap(),
-                                OutEdgeRangeFn{graph});
+                                OutEdgeRangeFn{graph}, total_work);
     break;
   case topo:
     topoAlgo(graph, source);
@@ -452,7 +454,7 @@ int main(int argc, char** argv) {
 
   case deltaStepBarrier:
     deltaStepAlgo<UpdateRequest, OBIM_Barrier>(graph, source, ReqPushWrap(),
-                                               OutEdgeRangeFn{graph});
+                                               OutEdgeRangeFn{graph}, total_work);
     break;
 
   default:
@@ -467,9 +469,9 @@ int main(int argc, char** argv) {
             << graph.getData(report) << "\n";
 
   // Sanity checking code
-  galois::GReduceMax<uint64_t> maxDistance;
-  galois::GAccumulator<uint64_t> distanceSum;
-  galois::GAccumulator<uint32_t> visitedNode;
+  galois::GReduceMax<float> maxDistance;
+  galois::GAccumulator<float> distanceSum;
+  galois::GAccumulator<float> visitedNode;
   maxDistance.reset();
   distanceSum.reset();
   visitedNode.reset();
@@ -477,7 +479,7 @@ int main(int argc, char** argv) {
   galois::do_all(
       galois::iterate(graph),
       [&](uint64_t i) {
-        uint32_t myDistance = graph.getData(i);
+        float myDistance = graph.getData(i);
 
         if (myDistance != SSSP::DIST_INFINITY) {
           maxDistance.update(myDistance);
@@ -488,9 +490,9 @@ int main(int argc, char** argv) {
       galois::loopname("Sanity check"), galois::no_stats());
 
   // report sanity stats
-  uint64_t rMaxDistance = maxDistance.reduce();
-  uint64_t rDistanceSum = distanceSum.reduce();
-  uint64_t rVisitedNode = visitedNode.reduce();
+  float rMaxDistance = maxDistance.reduce();
+  float rDistanceSum = distanceSum.reduce();
+  float rVisitedNode = visitedNode.reduce();
   galois::gInfo("# visited nodes is ", rVisitedNode);
   galois::gInfo("Max distance is ", rMaxDistance);
   galois::gInfo("Sum of visited distances is ", rDistanceSum);
@@ -505,5 +507,52 @@ int main(int argc, char** argv) {
 
   totalTime.stop();
 
+	float ms_time = (float) execTime.get_usec() / (float) 1000.0;
+
+	std::cout << "total_work " << total_work << "\n";
+	std::cout << "time " << ms_time << "\n";
+
+	char short_name[256];
+	{
+		char* tmp;
+		char c_name[256];
+		strcpy(c_name, inputFile.c_str());
+		tmp = strtok(c_name, "/");
+		while (tmp != NULL) {
+			strcpy(short_name, tmp);
+			tmp = strtok(NULL, "/");
+		}
+	}
+
+
+	char file_name[256];
+	if(algo == deltaStep){
+		strcpy(file_name,"ds_float_final_dist/");
+	}else if(algo == dijkstra){
+		strcpy(file_name,"dj_float_final_dist/");
+	}else{
+		assert(false);
+	}
+	strcat(file_name,short_name);
+
+	//node data
+	FILE *fp = fopen(file_name, "w");
+
+
+	for (unsigned i = 0; i < graph.size(); i++) {
+		float dist = graph.getData(i);
+		if (dist == SSSP::DIST_INFINITY) {
+			fprintf(fp, "%d INF\n", i);
+		} else {
+			fprintf(fp, "%d %f\n", i,   dist);
+		}
+	}
+
+	FILE * d3;
+	d3 = fopen("/dev/fd/3", "a");
+	fprintf(d3, "%s %.3f %llu\n", short_name, ms_time,  total_work);
+	fclose(d3);
+
+
   return 0;
 }
diff --git a/lonestar/liblonestar/include/Lonestar/BFS_SSSP.h b/lonestar/liblonestar/include/Lonestar/BFS_SSSP.h
index a370879f9..3c5b223dd 100644
--- a/lonestar/liblonestar/include/Lonestar/BFS_SSSP.h
+++ b/lonestar/liblonestar/include/Lonestar/BFS_SSSP.h
@@ -48,13 +48,14 @@ struct BFS_SSSP {
   };
 
   struct UpdateRequestIndexer {
-    unsigned shift;
+	float div;
 
-    template <typename R>
-    unsigned int operator()(const R& req) const {
-      unsigned int t = req.dist >> shift;
-      return t;
-    }
+	template<typename R>
+	unsigned int operator()(const R& req) const {
+		unsigned int t =   (unsigned int)(req.dist / div) ;
+		return t;
+
+	}
   };
 
   struct SrcEdgeTile {
